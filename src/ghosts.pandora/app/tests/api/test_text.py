from unittest.mock import patch

from app.main import app
from fastapi.testclient import TestClient

client = TestClient(app)


def test_return_text_success(default_text_response):
    """Test successful document generation with random content."""
    response = default_text_response
    assert response.status_code == 200
    assert response.headers["Content-Type"].startswith("text/plain")
    assert "Content-Disposition" in response.headers
    assert response.headers["Content-Disposition"].startswith("inline; filename=")
    assert response.headers["Content-Disposition"].endswith(".txt")
    assert len(response.content) > 0


@patch("config.config.OLLAMA_ENABLED", True)
@patch(
    "utils.ollama.generate_document_with_ollama",
    return_value="This is a sample document generated by Ollama.",
)
def test_return_text_with_ollama(mock_generate_document_with_ollama):
    """Test document generation with Ollama enabled."""
    response = client.get("/text")

    # Ensure the mock was called
    mock_generate_document_with_ollama.assert_called_once()

    # Validate the response content and headers
    assert response.status_code == 200
    assert response.headers["Content-Type"] == "text/plain; charset=utf-8"
    assert response.headers["Content-Disposition"].endswith(".txt")
    assert "This is a sample document generated by Ollama." in response.content.decode(
        "utf-8"
    )


@patch("app.utils.ollama.generate_document_with_ollama", side_effect=TimeoutError)
def test_return_text_fallback(mock_generate_document):
    response = client.get("/text")
    assert response.status_code == 200
    assert response.headers["Content-Type"].startswith("text/plain")
    assert "Content-Disposition" in response.headers
    assert "<h1>" in response.content.decode("utf-8")


def test_return_text_with_filename(default_text_response):
    """Test document generation with a filename specified."""
    response = client.get("/text/samplefile.txt")
    assert response.status_code == 200
    assert response.headers["Content-Type"].startswith("text/plain")
    assert "Content-Disposition" in response.headers
    assert response.headers["Content-Disposition"] == "inline; filename=samplefile.txt"


def test_text_document_structure(default_text_response):
    """Test the structure of the generated text document content."""
    response = default_text_response
    assert response.status_code == 200
    content = response.content.decode("utf-8")

    assert "<h1>" in content  # Ensure heading is included
    assert "<h2>" in content  # Ensure subheadings are included
    assert "<p>" in content  # Ensure paragraphs are included
    assert "</h1>" in content  # Ensure closing tag for heading
    assert "</h2>" in content  # Ensure closing tag for subheading
    assert "</p>" in content  # Ensure closing tag for paragraphs
