import re

from app_logging import setup_logger

logger = setup_logger(__name__)


def filter_llm_response(content: str) -> str:
    """
    Filter and clean up the LLM-generated response content.

    Args:
        content (str): The original content generated by the LLM.

    Returns:
        str: The cleaned and filtered content.
    """
    logger.debug("Starting to filter LLM response.")
    logger.debug(f"Original content: {content}")

    # Remove """ (triple double quotes), ''' (triple single quotes), or triple backticks (```)
    content = re.sub(r'"""|\'\'\'|```', "", content)
    logger.debug(f"Removed triple quotes and backticks: {content}")

    # Split the content into sentences
    content_sentences = re.split(r"([\:|\.|!|\?])", content)
    logger.debug(f"Split content into sentences: {content_sentences}")

    # Combine split sentences into complete sentences
    content_sentences = [
        (content_sentences[i] + content_sentences[i + 1])
        for i in range(0, len(content_sentences) // 2, 2)
    ]
    logger.debug(f"Reconstructed sentences: {content_sentences}")

    # Iterate and filter each sentence
    for i, sentence in enumerate(content_sentences):
        logger.debug(f"Processing sentence {i}: {sentence}")

        # Remove leading words followed by a comma
        if re.match(r"\b\w+,\s*", sentence):
            sentence = re.sub(r"\b\w+,\s*", "", sentence)
            if sentence:
                sentence = sentence[0].upper() + sentence[1:]
            logger.debug(f"Removed leading word and comma: {sentence}")

        # Remove single words ending with exclamation marks
        if re.match(r"^\s*\w+!", sentence):
            sentence = re.sub(r"^\w+!", "", sentence)
            logger.debug(f"Removed single word exclamation: {sentence}")

        # Remove phrases with two words ending with exclamation marks
        if re.match(r"^\s*\w+\s\w+!", sentence):
            sentence = re.sub(r"^\w+\s\w+!", "", sentence)
            logger.debug(f"Removed two-word exclamation: {sentence}")

        # Remove phrases that start with "here is", "here are", etc.
        if re.match(
            r"^\s*.*\b(here is|here are|here's a|here's an|here's the|here's)\b.*$",
            sentence,
            flags=re.IGNORECASE,
        ):
            sentence = re.sub(
                r"^\s*.*\b(here is|here are|here's a|here's an|here's the|here's)\b.*$",
                "",
                sentence,
                flags=re.IGNORECASE,
            )
            logger.debug(f"Removed 'here is' phrases: {sentence}")

        # Remove generic or filler phrases
        if re.match(
            r"^\s*.*\b(a sentence about|a paragraph about|like to know|I hope|AI-powered|be happy to help|can help you)\b.*$",
            sentence,
            flags=re.IGNORECASE,
        ):
            sentence = re.sub(
                r"^\s*.*\b(a sentence about|a paragraph about|like to know|I hope|AI-powered|be happy to help|can help you)\b.*$",
                "",
                sentence,
                flags=re.IGNORECASE,
            )
            logger.debug(f"Removed generic/filler phrases: {sentence}")

        # Remove hypothetical or context-based phrases
        if re.match(
            r"^\s*.*\b(hypothetical|may contain|based on the context provided|based on the provided context)\b.*$",
            sentence,
            flags=re.IGNORECASE,
        ):
            sentence = re.sub(
                r"^\s*.*\b(hypothetical|may contain|based on the context provided|based on the provided context)\b.*$",
                "",
                sentence,
                flags=re.IGNORECASE,
            )
            logger.debug(f"Removed context-based phrases: {sentence}")

        # Remove any emojis
        emoji_pattern = re.compile(
            "["
            "\U0001f600-\U0001f64f"  # emoticons
            "\U0001f300-\U0001f5ff"  # symbols & pictographs
            "\U0001f680-\U0001f6ff"  # transport & map symbols
            "\U0001f1e0-\U0001f1ff"  # flags (iOS)
            "]+",
            flags=re.UNICODE,
        )
        sentence = emoji_pattern.sub(r"", sentence)
        logger.debug(f"Removed emojis: {sentence}")

        content_sentences[i] = sentence

    # Join the filtered sentences back into a single string
    content = " ".join(content_sentences).strip()
    logger.debug(f"Final filtered content: {content}")

    return content
