from typing import List

from app_logging import setup_logger
from config import config

from .doc_loader import load_documents_from_directories, split_documents_into_chunks
from .embeddings import BertEmbeddings
from .llm_utils import generate_response

logger = setup_logger(__name__)


def main(query: str, doc_dirs: List[str] = ["./docs"], model_name: str = None) -> str:
    """
    Main function to process a query, embed documents, and generate a response using a specified model.

    Args:
        query (str): The query to process and respond to.
        doc_dirs (List[str], optional): A list of directories containing documents to load and embed. Defaults to ["./docs"].
        model_name (str, optional): The name of the model to use for generating the response. Defaults to None.
                                    If None, the default model from the config is used.

    Returns:
        str: The response generated by the model.
    """

    logger.info("Starting the main process...")
    logger.debug(f"Query received: {query}")
    logger.debug(f"Document directories: {doc_dirs}")

    # Use default model name if none is provided
    if model_name is None:
        model_name = config.ACTIVITY_MODEL
    logger.debug(f"Model name: {model_name}")

    # Load and embed documents
    documents = load_documents_from_directories(doc_dirs)
    if documents:
        logger.info(f"{len(documents)} documents loaded successfully.")
        chunks = split_documents_into_chunks(documents)
        logger.debug(f"Documents split into {len(chunks)} chunks.")

        # Create BERT embeddings for the document chunks
        bert_embeddings = BertEmbeddings()
        document_embeddings = bert_embeddings.embed_documents(chunks)
        logger.info("Documents embedded successfully.")

        # Use embeddings to help generate a relevant response
        logger.debug(
            "Using embeddings to assist in generating a more relevant response."
        )
        response = generate_response(
            query, model_name, document_embeddings=document_embeddings
        )
    else:
        document_embeddings = []
        logger.warning("No documents found or loaded.")

        # Generate a response without document embeddings if no documents are loaded
        response = generate_response(query, model_name)

    logger.info("Response generation completed.")
    logger.debug(f"Generated response: {response}")

    return response
